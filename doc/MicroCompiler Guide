This guide serves to document the basic structure of the compiler and the format 
of its input/output files.


## .mias file format

###The .mias file

A file ending in the .mias extension will be interpretted as 
a **MI**crocompiler **AS**sembly file. 
This file will serve as the editable input to the microcompiler to be coverted into a 
binary file to be uploaded to a xilinx ARTYZ7 FPGA implementing the microcontroller. 
The compiled binary (.mbin) programs the instruction BRAM (used as ROM) 
and other future ROMs / Programmable memory

###Sectors
A .mias file is broken into Sectors, which define individual parts of the environment. 
Each sector is encased in [...] brckets to signal to the 
compiler that it has encountered a new sector. The basic sectors are described below.

###[HEADER] Sector
The header sector contains all of the metadata about the file and environment 
for which the compiler is compiling.

The header allows a user to specifiy the available instruction set and other non-predefined
variables affecting the compilation process, called Fields.


###[DATA] Sector (currently unimplemented, but required in file)
The data sectors allows the user to define addressable sections of memory 
to be allocated for use in the program.

###[PROGRAM] Sector
The [PROGRAM] sector contains all of the code of the program. One instruction is
allowed per line and required no terminating character.

####Instruction format

An instruction will have a format of [INSTRUCTION] [Destination], [Source A], [Source C]
A space seperates the instruction name and the destination register and each register
or constant after is seperated by a comma and space ', '

ex: ADD REG1, REG2, $32
The result is adding decimal 32 to the contents of register 2 and storing it into
register 1

####Routines
Routines are contained pieces of code which are exectued sequentually. All program
code must be inside a routine. Routines are defined by a unique, case sensitive name
which is delimited by a colon ( ':', ie. main: )

#####'main' Routine
Every file must have a 'main:' routine. The main routine is read through sequentually and
any routines called within 'main' are executed in the sequence in which they appear
in 'main'. Routines may be defined anywhere within the program sector. Nested routines are called co-routines.

######Supported constant formats
To provide a constant value to an instruction, preceed a decimal value with $,
a hex value with x, and binary with b

####Comments
Comments are C style. A line comment begins with '//', a block comment begins with
'/*' and is terminated by '*/'. Any line delimited by '//' or on or between the beginning
and end of a block comment will be ignored by the compiler

###Header

The Header of a .mias contains the implementation information of the microprocessor. 
These variables must be set to determine instruction-length, memory sizing, etc.

All fields must be immediately prefixed with a '#', with a space between the field and 
the value.

FORMAT #[FIELD] [VALUE] (ex. REGFILE_SIZE 8 [8 registers in the register file])
- REGFILE_SIZE  
- DATA_WIDTH   
- OPCODE_WIDTH %this may be redundent, as the instruction extension 
would determine opcode widith%
- INSTRUC_EXTEN (value is alphabetical)

####Header Fields
REGFILE_SIZE : The number of registers inside the processors register file. 
The registers in the regfile as addressed by logbase2(REGFILE_SIZE).

DATA_WIDTH : The bitwidth of all computation data. This has the additional 
consequence of determining the max range of addressable memory (at time of writing).

OPCODE_WIDTH : The bitwidth of opcode field 
(number of available opcodes = (2^OPCODE_WIDTH) - 1

INSTRUC_EXTEN : Any extensions to the number of instructions in the architecture. 


##Resources

Resources are text files the compiler reads from to confirm or gather information
encountered during parsing. An example is checking if an instruction used in the program
actually exists.

Resource files allow comments using C-style prefixes and block comments

###Instruction.res

The instruction resource file contains all of the instructions available

####Instruction Sets

The instructions are broken into instruction sets; each instruction set has a minimum
opcode length. Attempting to call an instruction outside of the valid instruction sets
specified in the HEADER sectors INSTRUC_EXTEN variable will result in a compilation error
and the compiler will cease processing.

#####How the compiler finds instructions

All instructions exist under an instruction set header. The instructions in
the base instruction set, A, are under a header [INSTRUCTION_SET_A]. When the compiler
is seeking an instruction set, it searches the instruction sets specified in the 
INSTRUC_EXTEN field.

####Instruction format

All instructions are stored in lower case with a space between the instruction name
and the binary string representing the opcode for that instruction.

Instructions allowing constants are suffixed by '_c'.

The 'add' instruction only allows registers, while 'add_c' allows a user to enter a constant
as an operand in the final source field, [Source C]

####Notes

Technically, a user is free and able to define their own instructions so long as those
instructions do not overlap any instructions specified in the INSTRUC_EXTEN instruction
sets.

Simply create an instruction set header which does not conflict with any implemented 
instruction set, paste [INSTRUCTION_SET_N] (where N is any single character letter or number)
onto a new line and follow the standard instruction syntax. 

A bad user can erase instructions from an implemented set and replace them with other
instructions. But Im not your dad. 


## .mbin file format

The .mbin file is a simple binary file which contains compiled instructions 
in simple sequential order. Currently, there is no instruction re-ordering. 
The length of the binary instructions is determined by the the 
Header Fields in the following basic format.

####MSB->[OPCODE_WIDTH] [logbase2(REGFILE_SIZE)] [DATA_WIDTH] [logbase2(REGFILE_SIZE)]

If
- OPCODE_LENGTH = 4
- REGFILE_SIZE = 8
- DATA_WIDTH = 8

Then INSTRUCTION_WIDTH = 4 + 3 + 8 + 3 = 18. An example binary instruction would 
be MSB->010001010101100110 or 01|00 01|0 101|0110|0 110 where every nybble (yes, nYbble)
is seperated by | and related bits are adjacent (even if seperated by a |) and 
a space between unrelated bits

(Bits [17:14] = 01|00 is the opcode, with 2 bits in nybble 5 and 2 in nybble 4. 
These bits are related and so there is no space between them, even if seperated by a |.
Looking back at nybble 4 Bits [15:12], bits 15 and 14 belong to the opcode, 
while bits 13 and 12 are 2 of the 3 bits used to access the regfile. 
Because bits 15:14 and 13:12 are not related, they are seperated by a space, 
despite being in the same nybble. 
As with before, regfile address bits 13:11 are adjacent, 
although seperated by a | because they are in seperate nybbles.)
